{"version":3,"file":"static/js/736.f6a05923.chunk.js","mappings":"oPAEaA,E,QAAWC,GAAAA,GAAH,qQ,mBCyCrB,EAnCa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAyBE,EAAAA,EAAAA,GAAYC,EAAAA,GAAmBH,EAAS,MAAjE,eAAOI,EAAP,KAAeC,EAAf,KAEA,OACE,gCACGA,IAAWC,EAAAA,EAAAA,MACV,wEAEDF,GAA4B,IAAlBA,EAAOG,SAChB,gEAEDF,IAAWC,EAAAA,EAAAA,OAAmB,SAACE,EAAA,EAAD,IAC9BH,IAAWC,EAAAA,EAAAA,MAAmBF,IAC7B,SAACN,EAAD,UACGM,EAAOK,KAAI,SAAAC,GAAK,OACf,2BACE,gBACEC,IACED,EAAME,aAAN,yCACsCF,EAAME,cACxCC,EAENC,IAAKJ,EAAMK,QAEb,0BAAOL,EAAMK,QACb,uCAAaL,EAAMM,eAVZN,EAAMO,c,gICtBdX,EAAa,CACxBY,KAAM,OACNC,KAAM,UACNC,IAAK,SAGMlB,EAAc,SAACmB,EAAUC,GAAgC,IAA1BC,EAAyB,uDAAT,KAC1D,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAoCF,EAAAA,EAAAA,UAAS,MAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAA4BJ,EAAAA,EAAAA,UAASlB,EAAWY,MAAhD,eAAOb,EAAP,KAAewB,EAAf,KAuBA,OArBAC,EAAAA,EAAAA,YAAU,WACR,GAAsB,KAAlBP,EAAJ,CAIA,IAAMQ,EAAU,mCAAG,2FACjBF,EAAUvB,EAAWa,MADJ,kBAGME,EAASC,EAAMC,GAHrB,OAGTS,EAHS,OAIfN,EAASM,EAAOC,SAChBL,EAAcI,EAAOE,OALN,gDAOfC,QAAQC,IAAR,MACAP,EAAUvB,EAAWc,KARN,yBAUfS,EAAUvB,EAAWY,MAVN,4EAAH,qDAahBa,OACC,CAACT,EAAMD,EAAUE,IAEb,CAACE,EAAOpB,EAAQsB,K","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","hooks/useFetching.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  gap: 12px;\n  grid-template-columns: repeat(6, 1fr);\n\n  li {\n    color: #c3c8d4;\n    background-color: rgb(32, 40, 62, 80%);\n    padding: 5px;\n    border-radius: 8px;\n  }\n  span {\n    font-weight: 600;\n  }\n`;\n","import { useParams } from 'react-router-dom';\nimport { fetchMovieCredits } from 'services/api-service';\nimport { useFetching } from 'hooks/useFetching';\nimport { Loading } from 'components/Loading/Loading';\nimport { statusList } from 'hooks/useFetching';\nimport { CastList } from './Cast.styled';\nimport insteadPhoto from '../../images/actor.png';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, status] = useFetching(fetchMovieCredits, movieId, null);\n\n  return (\n    <>\n      {status === statusList.ERR && (\n        <p>Something is wrong... Try to reload the page</p>\n      )}\n      {actors && actors.length === 0 && (\n        <p>There is no information about actors</p>\n      )}\n      {status === statusList.LOAD && <Loading />}\n      {status === statusList.IDLE && actors && (\n        <CastList>\n          {actors.map(actor => (\n            <li key={actor.id}>\n              <img\n                src={\n                  actor.profile_path\n                    ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n                    : insteadPhoto\n                }\n                alt={actor.name}\n              />\n              <span>{actor.name}</span>\n              <p>{`Role: ${actor.character}`}</p>\n            </li>\n          ))}\n        </CastList>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import { useState, useEffect } from 'react';\n\nexport const statusList = {\n  IDLE: 'idle',\n  LOAD: 'loading',\n  ERR: 'error',\n};\n\nexport const useFetching = (callback, page, fetchParametr = null) => {\n  const [state, setState] = useState(null);\n  const [totalPages, setTotalPages] = useState(null);\n  const [status, setStatus] = useState(statusList.IDLE);\n\n  useEffect(() => {\n    if (fetchParametr === '') {\n      return;\n    }\n\n    const fetchFilms = async () => {\n      setStatus(statusList.LOAD);\n      try {\n        const result = await callback(page, fetchParametr);\n        setState(result.results);\n        setTotalPages(result.pages);\n      } catch (error) {\n        console.log(error);\n        setStatus(statusList.ERR);\n      } finally {\n        setStatus(statusList.IDLE);\n      }\n    };\n    fetchFilms();\n  }, [page, callback, fetchParametr]);\n\n  return [state, status, totalPages];\n};\n"],"names":["CastList","styled","movieId","useParams","useFetching","fetchMovieCredits","actors","status","statusList","length","Loading","map","actor","src","profile_path","insteadPhoto","alt","name","character","id","IDLE","LOAD","ERR","callback","page","fetchParametr","useState","state","setState","totalPages","setTotalPages","setStatus","useEffect","fetchFilms","result","results","pages","console","log"],"sourceRoot":""}