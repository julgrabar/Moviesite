{"version":3,"file":"static/js/413.b2a18f47.chunk.js","mappings":"6LAEaA,EAAY,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACjC,OACE,wBACGD,EAAME,KAAI,SAAAC,GAAI,aACb,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAAEC,KAAMN,GAA/C,mBACGE,EAAKK,aADR,QACiBL,EAAKM,iBAFfN,EAAKE,W,gICJTK,EAAa,CACxBC,KAAM,OACNC,KAAM,UACNC,IAAK,SAGMC,EAAc,SAACC,GAAoC,IAA1BC,EAAyB,uDAAT,KACpD,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOX,EAAP,KAAcY,EAAd,KACA,GAA4BD,EAAAA,EAAAA,UAASP,EAAWC,MAAhD,eAAOQ,EAAP,KAAeC,EAAf,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACR,GAAsB,KAAlBL,EAAJ,CAIA,IAAMM,EAAU,mCAAG,2FACjBF,EAAUV,EAAWE,MADJ,kBAGMG,EAASC,GAHf,OAGTO,EAHS,OAIfL,EAASK,GAJM,gDAMfC,QAAQC,IAAR,MACAL,EAAUV,EAAWG,KAPN,yBASfO,EAAUV,EAAWC,MATN,4EAAH,qDAYhBW,OACC,CAACP,EAAUC,IAEP,CAACV,EAAOa,K,0MC/BjBO,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAECC,EAAa,mCAAG,oGACFF,IAAAA,IAAA,sCAAyCC,IADvC,cACnBE,EADmB,yBAElBA,EAASC,KAAKC,SAFI,2CAAH,qDAKbC,EAAY,mCAAG,WAAOC,GAAP,4FAAcC,EAAd,+BAAmB,EAAnB,SACDR,IAAAA,IAAA,gCAAmCC,EAAnC,iCAA+DM,EAA/D,iBAA6EC,EAA7E,yBADC,cAClBL,EADkB,yBAEjBA,EAASC,KAAKC,SAFG,2CAAH,sDAKZI,EAAiB,mCAAG,WAAOC,GAAP,uFACNV,IAAAA,IAAA,iBAAoBU,EAApB,oBAAuCT,EAAvC,oBADM,cACvBE,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,sDAKjBO,EAAiB,mCAAG,WAAOD,GAAP,4FAAgBF,EAAhB,+BAAqB,EAArB,SACNR,IAAAA,IAAA,iBAAoBU,EAApB,4BAA+CT,EAA/C,gCAA0EO,IADpE,cACvBL,EADuB,yBAEtBA,EAASC,KAAKC,SAFQ,2CAAH,sDAKjBO,EAAiB,mCAAG,WAAOF,GAAP,uFACNV,IAAAA,IAAA,iBAAoBU,EAApB,4BAA+CT,EAA/C,oBADM,cACvBE,EADuB,yBAEtBA,EAASC,KAAKS,MAFQ,2CAAH,uD,sHCnBjBC,EAAa,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEnBC,GAAWC,EAAAA,EAAAA,MAAXD,OAER,GAA0BzB,EAAAA,EAAAA,UACxB,IAAI2B,gBAAgBF,GAAQG,IAAI,UAAY,IAD9C,eAAOZ,EAAP,KAAca,EAAd,KAyBA,OACE,kBAAMC,SAtBY,SAAAC,GAClBA,EAAEC,iBACGhB,EAULQ,EAAMR,EAAQ,CAAEA,MAAAA,GAAU,CAAEA,MAAO,KATjCiB,MAAM,6BAmBR,WACE,4BACE,kBACEC,KAAK,OACLC,KAAK,SACLC,SAZc,SAAAL,GACpB,IAAMf,EAAQe,EAAEM,OAAOC,MAEvBT,EAASb,IAWHsB,MAAOtB,OAGX,mBAAQkB,KAAK,SAAb,wB,uCCIN,EAxCmB,WACjB,OAAwCK,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAGA,GAA+B5C,EAAAA,EAAAA,GAC7BkB,EAAAA,GACAyB,EAAaZ,IAAI,UAAY,IAF/B,eAAOc,EAAP,KAAqBxC,EAArB,KAIA,GAA6BwB,EAAAA,EAAAA,MAArBD,EAAR,EAAQA,OAAQkB,EAAhB,EAAgBA,SAShB,OAPAvC,EAAAA,EAAAA,YAAU,WACR,IAAMY,EAAQ,IAAIW,gBAAgBF,GAAQG,IAAI,SAC1CZ,GACFyB,EAAgB,CAAEzB,MAAAA,MAEnB,CAACS,EAAQgB,KAGV,iCACE,SAAClB,EAAD,CAAYC,MAAOiB,IAElBvC,IAAWT,EAAAA,EAAAA,MACV,wEAGDS,IAAWT,EAAAA,EAAAA,OAAmB,SAACmD,EAAA,EAAD,IAC9B1C,IAAWT,EAAAA,EAAAA,MAAmBiD,IAC7B,iCACE,2CACCA,GAAwC,IAAxBA,EAAaG,QAC5B,8DAEA,SAAC/D,EAAA,EAAD,CAAWC,MAAO2D,EAAc1D,IAAK2D,EAAWlB","sources":["components/FilmsList/FilmsList.jsx","hooks/useFetching.jsx","services/api-service.js","components/SearchForm/SearchForm.jsx","views/MoviesPage.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\n\nexport const FilmsList = ({ films, loc }) => {\n  return (\n    <ul>\n      {films.map(film => (\n        <li key={film.id}>\n          <Link to={`/movies/${film.id}`} state={{ from: loc }}>\n            {film.title ?? film.original_name}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { useState, useEffect } from 'react';\n\nexport const statusList = {\n  IDLE: 'idle',\n  LOAD: 'loading',\n  ERR: 'error',\n};\n\nexport const useFetching = (callback, fetchParametr = null) => {\n  const [state, setState] = useState(null);\n  const [status, setStatus] = useState(statusList.IDLE);\n\n  useEffect(() => {\n    if (fetchParametr === '') {\n      return;\n    }\n\n    const fetchFilms = async () => {\n      setStatus(statusList.LOAD);\n      try {\n        const result = await callback(fetchParametr);\n        setState(result);\n      } catch (error) {\n        console.log(error);\n        setStatus(statusList.ERR);\n      } finally {\n        setStatus(statusList.IDLE);\n      }\n    };\n    fetchFilms();\n  }, [callback, fetchParametr]);\n\n  return [state, status];\n};\n","import axios from \"axios\";\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\"\nconst KEY = \"04c27220ef2dd4b0aa9913b6cfeafdd6\"\n\nexport const fetchTrending = async () =>{\n    const response = await axios.get(`/trending/movie/day?api_key=${KEY}`)\n    return response.data.results;\n}\n\nexport const searchMovies = async (query, page=1) => {\n    const response = await axios.get(`/search/movie?api_key=${KEY}&language=en-US&query=${query}&page=${page}&include_adult=false`);\n    return response.data.results;\n}\n\nexport const fetchMovieDetails = async (movieId) => {\n    const response = await axios.get(`/movie/${movieId}?api_key=${KEY}&language=en-US`);\n    return response.data;\n}\n\nexport const fetchMovieReviews = async (movieId, page=1) => {\n    const response = await axios.get(`/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=${page}`);\n    return response.data.results;\n}\n\nexport const fetchMovieCredits = async (movieId) => {\n    const response = await axios.get(`/movie/${movieId}/credits?api_key=${KEY}&language=en-US`);\n    return response.data.cast;\n}","// import { useState } from 'react';\nimport { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n// import { useSearchParams } from 'react-router-dom';\n\nexport const SearchForm = ({ onSub }) => {\n  // const [searchParams, setSearchParams] = useSearchParams();\n  const { search } = useLocation();\n\n  const [query, setQuery] = useState(\n    new URLSearchParams(search).get('query') || ''\n  );\n\n  const onSearchSub = e => {\n    e.preventDefault();\n    if (!query) {\n      alert('Enter the search request');\n      return;\n    }\n    // if (!searchParams.get('query').trim()) {\n    //   alert('Enter the search request');\n    //   return;\n    // }\n\n    // onSub(searchParams.get('query'));\n    onSub(query ? { query } : { query: '' });\n  };\n\n  const onSearchInput = e => {\n    const query = e.target.value;\n    // setSearchParams(query ? { query } : {});\n    setQuery(query);\n  };\n\n  return (\n    <form onSubmit={onSearchSub}>\n      <label>\n        <input\n          type=\"text\"\n          name=\"search\"\n          onChange={onSearchInput}\n          // value={searchParams.get('query') || ''}\n          value={query}\n        />\n      </label>\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n","import { FilmsList } from 'components/FilmsList/FilmsList';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { useFetching } from 'hooks/useFetching';\nimport { useEffect } from 'react';\nimport { searchMovies } from 'services/api-service';\nimport { statusList } from 'hooks/useFetching';\nimport { Loading } from 'components/Loading/Loading';\nimport { useLocation, useSearchParams } from 'react-router-dom';\n\nconst MoviesPage = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  // const [searchValue, setSearchValue] = useState('');\n  // const [searchResult, status] = useFetching(searchMovies, searchValue);\n  const [searchResult, status] = useFetching(\n    searchMovies,\n    searchParams.get('query') || ''\n  );\n  const { search, pathname } = useLocation();\n\n  useEffect(() => {\n    const query = new URLSearchParams(search).get('query');\n    if (query) {\n      setSearchParams({ query });\n    }\n  }, [search, setSearchParams]);\n\n  return (\n    <>\n      <SearchForm onSub={setSearchParams} />\n\n      {status === statusList.ERR && (\n        <p>Something is wrong... Try to reload the page</p>\n      )}\n\n      {status === statusList.LOAD && <Loading />}\n      {status === statusList.IDLE && searchResult && (\n        <>\n          <h1>Search results</h1>\n          {searchResult && searchResult.length === 0 ? (\n            <p>There are no films with this name</p>\n          ) : (\n            <FilmsList films={searchResult} loc={pathname + search} />\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["FilmsList","films","loc","map","film","to","id","state","from","title","original_name","statusList","IDLE","LOAD","ERR","useFetching","callback","fetchParametr","useState","setState","status","setStatus","useEffect","fetchFilms","result","console","log","axios","KEY","fetchTrending","response","data","results","searchMovies","query","page","fetchMovieDetails","movieId","fetchMovieReviews","fetchMovieCredits","cast","SearchForm","onSub","search","useLocation","URLSearchParams","get","setQuery","onSubmit","e","preventDefault","alert","type","name","onChange","target","value","useSearchParams","searchParams","setSearchParams","searchResult","pathname","Loading","length"],"sourceRoot":""}